{"version":3,"sources":["Modal.js","App.js","serviceWorker.js","index.js"],"names":["Backdrop","styled","div","Main","Content","Modal","props","modalContentRef","useRef","isOpen","handleClose","useEffect","handleClick","e","current","contains","target","window","addEventListener","removeEventListener","focusable","querySelectorAll","firstFocusable","lastFocusable","length","focus","closeOnEscape","key","forEach","elm","handleTab","shiftKey","preventDefault","handleShiftTab","id","role","aria-modal","aria-labelledby","titleId","aria-describedby","descId","style","display","ref","children","Header","ModalHeader","Body","ModalBody","Footer","ModalFooter","Title","h4","App","useState","setIsOpen","value","setValue","onClose","type","onClick","className","onChange","console","log","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8a1650ea.chunk.js","sourcesContent":["import React, {useRef, useEffect} from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst Backdrop = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 1040;\r\n  background-color: #000;\r\n  opacity: 0.5;\r\n`;\r\n\r\nconst Main = styled.div`\r\n  display: block;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 1050;\r\n  display: none;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  outline: 0;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  max-width: 500px;\r\n  margin: 1.75rem auto;\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #fff;\r\n  background-clip: padding-box;\r\n  border: 1px solid rgba(0,0,0,.2);\r\n  border-radius: .3rem;\r\n  outline: 0;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst Modal = (props) => {\r\n  const modalContentRef = useRef();\r\n  const {isOpen, handleClose} = props;\r\n\r\n  //close modal by clicking outside it\r\n  useEffect(() => {\r\n    const handleClick = e => {\r\n      if (!(modalContentRef.current?.contains(e.target)))\r\n        handleClose();\r\n    }\r\n    if(isOpen) {\r\n      window.addEventListener(\"click\", handleClick);\r\n    }\r\n    return () => {\r\n      window.removeEventListener(\"click\", handleClick);\r\n    };\r\n  },[])\r\n\r\n  //trap focus in modal and press escape to close\r\n  useEffect(() => {\r\n    let focusable = modalContentRef.current.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\r\n    let firstFocusable = focusable[0];\r\n    let lastFocusable = focusable[focusable.length - 1];\r\n    firstFocusable.focus();\r\n\r\n    const closeOnEscape = e => {\r\n      if(e.key === 'Escape')\r\n        handleClose();\r\n    };\r\n    focusable.forEach(elm => {\r\n      elm.addEventListener('keydown', closeOnEscape)\r\n    })\r\n\r\n    const handleTab = e => {\r\n      if(!e.shiftKey && e.key === 'Tab') {\r\n        firstFocusable.focus();\r\n        e.preventDefault();\r\n      }\r\n    };\r\n    lastFocusable.addEventListener('keydown', handleTab);\r\n\r\n    const handleShiftTab = e => {\r\n      if(e.shiftKey && e.key === 'Tab') {\r\n        lastFocusable.focus();\r\n        e.preventDefault();\r\n      }\r\n    };\r\n    firstFocusable.addEventListener('keydown', handleShiftTab);\r\n\r\n    return () => {\r\n      focusable.forEach(elm => {\r\n        elm.removeEventListener('keydown', closeOnEscape)\r\n      });\r\n      lastFocusable.removeEventListener('keydown', handleTab);\r\n      firstFocusable.removeEventListener('keydown', handleShiftTab);\r\n    };\r\n  },[])\r\n\r\n  return (\r\n    <>\r\n      <Main id={`modal-1`}\r\n            role='dialog'\r\n            aria-modal='true'\r\n            aria-labelledby={props.titleId}\r\n            aria-describedby={props.descId}\r\n            style={{display: 'block'}}>\r\n        <Content ref={modalContentRef}>\r\n          {props.children}\r\n        </Content>\r\n      </Main>\r\n      <Backdrop />\r\n    </>    \r\n  );\r\n}\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: space-between;\r\n  padding: 1rem 1rem;\r\n  border-bottom: 1px solid #dee2e6;\r\n  border-top-left-radius: calc(.3rem - 1px);\r\n  border-top-right-radius: calc(.3rem - 1px);\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst ModalHeader = (props) => {\r\n\r\n  return (\r\n    <Header>\r\n      {props.children}\r\n    </Header> \r\n  );\r\n}\r\n\r\nconst Body = styled.div`\r\n  position: relative;\r\n  flex: 1 1 auto;\r\n  padding: 1rem;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst ModalBody = (props) => {\r\n\r\n  return (\r\n    <Body>\r\n      {props.children}\r\n    </Body> \r\n  );\r\n}\r\n\r\nconst Footer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  padding: .75rem;\r\n  border-top: 1px solid #dee2e6;\r\n  border-bottom-right-radius: calc(.3rem - 1px);\r\n  border-bottom-left-radius: calc(.3rem - 1px);\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst ModalFooter = (props) => {\r\n  return (\r\n    <Footer>\r\n      {props.children}\r\n    </Footer>\r\n  );\r\n}\r\n\r\nexport {Modal, ModalHeader, ModalBody, ModalFooter};","import React, {useState} from 'react';\r\nimport {Modal, ModalHeader, ModalBody, ModalFooter} from './Modal.js'\r\nimport './App.css';\r\nimport styled from 'styled-components';\r\n\r\nconst Title = styled.h4`\r\n  font-size: 1.5rem;\r\n  font-weight: 500;\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n  line-height: 1.5;\r\n`;\r\n\r\nfunction App() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [value, setValue] = useState();\r\n  const onClose = () => setIsOpen(false);\r\n  const onSave = () => {console.log(value)};\r\n\r\n  return (\r\n    <>\r\n      <button type=\"button\" onClick={() => setIsOpen(true)}>Open Modal</button>\r\n      {isOpen &&\r\n        <Modal isOpen={isOpen} titleId='modalTitle' descId='modalDesc' handleClose={onClose}>\r\n          <ModalHeader handleClose={onClose}>\r\n            <Title id='modalTitle' className='title'>Modal Title</Title>\r\n            <button type=\"button\" onClick={onClose}>&times;</button>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <p id='modalDesc'>Demo of a Modal</p>\r\n            <input type=\"text\" onChange={e => setValue(e.target.value)}/>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <button type=\"button\" onClick={onSave}>Save</button>\r\n            <button type=\"button\" onClick={onClose}>Close</button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}